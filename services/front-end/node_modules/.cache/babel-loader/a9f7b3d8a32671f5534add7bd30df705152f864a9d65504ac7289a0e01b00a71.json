{"ast":null,"code":"import axios from 'axios';\nexport const api = axios.create({\n  baseURL: 'http://localhost:3000',\n  timeout: 10000\n});\nlet isRefreshing = false;\nlet failedQueue = [];\nconst processQueue = (error, token = null) => {\n  failedQueue.forEach(prom => {\n    if (error) {\n      prom.reject(error);\n    } else {\n      prom.resolve(token);\n    }\n  });\n  failedQueue = [];\n};\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\napi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    var _originalRequest$url;\n    if (originalRequest._retry) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n      return Promise.reject(error);\n    }\n    originalRequest._retry = true;\n    const refreshToken = localStorage.getItem('refreshToken');\n    if (refreshToken && !((_originalRequest$url = originalRequest.url) !== null && _originalRequest$url !== void 0 && _originalRequest$url.includes('/auth/refresh'))) {\n      if (isRefreshing) {\n        return new Promise((resolve, reject) => {\n          failedQueue.push({\n            resolve,\n            reject\n          });\n        }).then(token => {\n          originalRequest.headers.Authorization = `Bearer ${token}`;\n          return api(originalRequest);\n        }).catch(err => {\n          return Promise.reject(err);\n        });\n      }\n      isRefreshing = true;\n      try {\n        const response = await api.post('/auth/refresh', {\n          refreshToken\n        });\n        const newToken = response.data.token;\n        localStorage.setItem('token', newToken);\n        processQueue(null, newToken);\n        originalRequest.headers.Authorization = `Bearer ${newToken}`;\n        return api(originalRequest);\n      } catch (refreshError) {\n        processQueue(refreshError, null);\n        localStorage.removeItem('token');\n        localStorage.removeItem('refreshToken');\n        window.location.href = '/login';\n        return Promise.reject(refreshError);\n      } finally {\n        isRefreshing = false;\n      }\n    } else {\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken');\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\nexport const authService = {\n  login: async loginData => {\n    var _response$data$data;\n    localStorage.removeItem('token');\n    localStorage.removeItem('refreshToken');\n    delete api.defaults.headers.common['Authorization'];\n    const response = await api.post('/auth/login', loginData, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if ((_response$data$data = response.data.data) !== null && _response$data$data !== void 0 && _response$data$data.token) {\n      localStorage.setItem('token', response.data.data.token);\n      if (response.data.data.refreshToken) {\n        localStorage.setItem('refreshToken', response.data.data.refreshToken);\n      }\n      api.defaults.headers.common['Authorization'] = `Bearer ${response.data.data.token}`;\n    }\n    return response.data;\n  },\n  register: async registerData => {\n    var _response$data$data2;\n    const response = await api.post('/auth/register', registerData, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if ((_response$data$data2 = response.data.data) !== null && _response$data$data2 !== void 0 && _response$data$data2.token) {\n      localStorage.setItem('token', response.data.data.token);\n      if (response.data.data.refreshToken) {\n        localStorage.setItem('refreshToken', response.data.data.refreshToken);\n      }\n      api.defaults.headers.common['Authorization'] = `Bearer ${response.data.data.token}`;\n    }\n    return response.data;\n  },\n  getProfile: async () => {\n    const response = await api.get('/auth/profile');\n    return response.data;\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('refreshToken');\n    delete api.defaults.headers.common['Authorization'];\n    api.post('/auth/logout').catch(() => {});\n  },\n  isAuthenticated: () => {\n    const token = localStorage.getItem('token');\n    return !!token;\n  },\n  getToken: () => localStorage.getItem('token'),\n  validateToken: async () => {\n    try {\n      await api.get('/auth/validate');\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n};","map":{"version":3,"names":["axios","api","create","baseURL","timeout","isRefreshing","failedQueue","processQueue","error","token","forEach","prom","reject","resolve","interceptors","request","use","config","localStorage","getItem","headers","Authorization","Promise","response","_error$response","originalRequest","status","_originalRequest$url","_retry","removeItem","window","location","href","refreshToken","url","includes","push","then","catch","err","post","newToken","data","setItem","refreshError","authService","login","loginData","_response$data$data","defaults","common","register","registerData","_response$data$data2","getProfile","get","logout","isAuthenticated","getToken","validateToken"],"sources":["C:/Users/sekne/OneDrive/Desktop/Veterinary-Clinic/services/front-end/src/store/authSlice.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { User, LoginData, RegisterData } from '../models/User';\r\n\r\nexport const api = axios.create({\r\n  baseURL: 'http://localhost:3000',\r\n  timeout: 10000,\r\n});\r\n\r\nlet isRefreshing = false;\r\nlet failedQueue: Array<{ resolve: (value?: any) => void; reject: (reason?: any) => void }> = [];\r\n\r\nconst processQueue = (error: any, token: string | null = null) => {\r\n  failedQueue.forEach(prom => {\r\n    if (error) {\r\n      prom.reject(error);\r\n    } else {\r\n      prom.resolve(token);\r\n    }\r\n  });\r\n  failedQueue = [];\r\n};\r\n\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n    \r\n    if (error.response?.status === 401) {\r\n      if (originalRequest._retry) {\r\n        localStorage.removeItem('token');\r\n        window.location.href = '/login';\r\n        return Promise.reject(error);\r\n      }\r\n\r\n      originalRequest._retry = true;\r\n      \r\n      const refreshToken = localStorage.getItem('refreshToken');\r\n      if (refreshToken && !originalRequest.url?.includes('/auth/refresh')) {\r\n        if (isRefreshing) {\r\n          return new Promise((resolve, reject) => {\r\n            failedQueue.push({ resolve, reject });\r\n          })\r\n          .then(token => {\r\n            originalRequest.headers.Authorization = `Bearer ${token}`;\r\n            return api(originalRequest);\r\n          })\r\n          .catch(err => {\r\n            return Promise.reject(err);\r\n          });\r\n        }\r\n\r\n        isRefreshing = true;\r\n\r\n        try {\r\n          const response = await api.post('/auth/refresh', { refreshToken });\r\n          const newToken = response.data.token;\r\n          \r\n          localStorage.setItem('token', newToken);\r\n          processQueue(null, newToken);\r\n          \r\n          originalRequest.headers.Authorization = `Bearer ${newToken}`;\r\n          return api(originalRequest);\r\n        } catch (refreshError) {\r\n          processQueue(refreshError, null);\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('refreshToken');\r\n          window.location.href = '/login';\r\n          return Promise.reject(refreshError);\r\n        } finally {\r\n          isRefreshing = false;\r\n        }\r\n      } else {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('refreshToken');\r\n        window.location.href = '/login';\r\n      }\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport interface AuthResponse {\r\n  success: boolean;\r\n  message: string;\r\n  data: {\r\n    user: User;\r\n    token: string;\r\n    refreshToken?: string;\r\n  };\r\n}\r\n\r\nexport const authService = {\r\n  login: async (loginData: LoginData): Promise<AuthResponse> => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('refreshToken');\r\n    delete api.defaults.headers.common['Authorization'];\r\n    \r\n    const response = await api.post<AuthResponse>('/auth/login', loginData, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n    \r\n    if (response.data.data?.token) {\r\n      localStorage.setItem('token', response.data.data.token);\r\n      \r\n      if (response.data.data.refreshToken) {\r\n        localStorage.setItem('refreshToken', response.data.data.refreshToken);\r\n      }\r\n      \r\n      api.defaults.headers.common['Authorization'] = `Bearer ${response.data.data.token}`;\r\n    }\r\n\r\n    return response.data;\r\n  },\r\n\r\n  register: async (registerData: RegisterData): Promise<AuthResponse> => {\r\n    const response = await api.post<AuthResponse>('/auth/register', registerData, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n    \r\n    if (response.data.data?.token) {\r\n      localStorage.setItem('token', response.data.data.token);\r\n      \r\n      if (response.data.data.refreshToken) {\r\n        localStorage.setItem('refreshToken', response.data.data.refreshToken);\r\n      }\r\n      \r\n      api.defaults.headers.common['Authorization'] = `Bearer ${response.data.data.token}`;\r\n    }\r\n\r\n    return response.data;\r\n  },\r\n\r\n  getProfile: async (): Promise<{ success: boolean; data: { user: User } }> => {\r\n    const response = await api.get<{ success: boolean; data: { user: User } }>('/auth/profile');\r\n    return response.data;\r\n  },\r\n\r\n  logout: (): void => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('refreshToken');\r\n    delete api.defaults.headers.common['Authorization'];\r\n    \r\n    api.post('/auth/logout').catch(() => {});\r\n  },\r\n\r\n  isAuthenticated: (): boolean => {\r\n    const token = localStorage.getItem('token');\r\n    return !!token;\r\n  },\r\n\r\n  getToken: (): string | null => localStorage.getItem('token'),\r\n\r\n  validateToken: async (): Promise<boolean> => {\r\n    try {\r\n      await api.get('/auth/validate');\r\n      return true;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,OAAO,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC9BC,OAAO,EAAE,uBAAuB;EAChCC,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,IAAIC,YAAY,GAAG,KAAK;AACxB,IAAIC,WAAsF,GAAG,EAAE;AAE/F,MAAMC,YAAY,GAAGA,CAACC,KAAU,EAAEC,KAAoB,GAAG,IAAI,KAAK;EAChEH,WAAW,CAACI,OAAO,CAACC,IAAI,IAAI;IAC1B,IAAIH,KAAK,EAAE;MACTG,IAAI,CAACC,MAAM,CAACJ,KAAK,CAAC;IACpB,CAAC,MAAM;MACLG,IAAI,CAACE,OAAO,CAACJ,KAAK,CAAC;IACrB;EACF,CAAC,CAAC;EACFH,WAAW,GAAG,EAAE;AAClB,CAAC;AAEDL,GAAG,CAACa,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMR,KAAK,GAAGS,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIV,KAAK,EAAE;IACTQ,MAAM,CAACG,OAAO,CAACC,aAAa,GAAG,UAAUZ,KAAK,EAAE;EAClD;EACA,OAAOQ,MAAM;AACf,CAAC,EACAT,KAAK,IAAKc,OAAO,CAACV,MAAM,CAACJ,KAAK,CACjC,CAAC;AAEDP,GAAG,CAACa,YAAY,CAACS,QAAQ,CAACP,GAAG,CAC1BO,QAAQ,IAAKA,QAAQ,EACtB,MAAOf,KAAK,IAAK;EAAA,IAAAgB,eAAA;EACf,MAAMC,eAAe,GAAGjB,KAAK,CAACS,MAAM;EAEpC,IAAI,EAAAO,eAAA,GAAAhB,KAAK,CAACe,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,MAAK,GAAG,EAAE;IAAA,IAAAC,oBAAA;IAClC,IAAIF,eAAe,CAACG,MAAM,EAAE;MAC1BV,YAAY,CAACW,UAAU,CAAC,OAAO,CAAC;MAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;MAC/B,OAAOV,OAAO,CAACV,MAAM,CAACJ,KAAK,CAAC;IAC9B;IAEAiB,eAAe,CAACG,MAAM,GAAG,IAAI;IAE7B,MAAMK,YAAY,GAAGf,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IACzD,IAAIc,YAAY,IAAI,GAAAN,oBAAA,GAACF,eAAe,CAACS,GAAG,cAAAP,oBAAA,eAAnBA,oBAAA,CAAqBQ,QAAQ,CAAC,eAAe,CAAC,GAAE;MACnE,IAAI9B,YAAY,EAAE;QAChB,OAAO,IAAIiB,OAAO,CAAC,CAACT,OAAO,EAAED,MAAM,KAAK;UACtCN,WAAW,CAAC8B,IAAI,CAAC;YAAEvB,OAAO;YAAED;UAAO,CAAC,CAAC;QACvC,CAAC,CAAC,CACDyB,IAAI,CAAC5B,KAAK,IAAI;UACbgB,eAAe,CAACL,OAAO,CAACC,aAAa,GAAG,UAAUZ,KAAK,EAAE;UACzD,OAAOR,GAAG,CAACwB,eAAe,CAAC;QAC7B,CAAC,CAAC,CACDa,KAAK,CAACC,GAAG,IAAI;UACZ,OAAOjB,OAAO,CAACV,MAAM,CAAC2B,GAAG,CAAC;QAC5B,CAAC,CAAC;MACJ;MAEAlC,YAAY,GAAG,IAAI;MAEnB,IAAI;QACF,MAAMkB,QAAQ,GAAG,MAAMtB,GAAG,CAACuC,IAAI,CAAC,eAAe,EAAE;UAAEP;QAAa,CAAC,CAAC;QAClE,MAAMQ,QAAQ,GAAGlB,QAAQ,CAACmB,IAAI,CAACjC,KAAK;QAEpCS,YAAY,CAACyB,OAAO,CAAC,OAAO,EAAEF,QAAQ,CAAC;QACvClC,YAAY,CAAC,IAAI,EAAEkC,QAAQ,CAAC;QAE5BhB,eAAe,CAACL,OAAO,CAACC,aAAa,GAAG,UAAUoB,QAAQ,EAAE;QAC5D,OAAOxC,GAAG,CAACwB,eAAe,CAAC;MAC7B,CAAC,CAAC,OAAOmB,YAAY,EAAE;QACrBrC,YAAY,CAACqC,YAAY,EAAE,IAAI,CAAC;QAChC1B,YAAY,CAACW,UAAU,CAAC,OAAO,CAAC;QAChCX,YAAY,CAACW,UAAU,CAAC,cAAc,CAAC;QACvCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;QAC/B,OAAOV,OAAO,CAACV,MAAM,CAACgC,YAAY,CAAC;MACrC,CAAC,SAAS;QACRvC,YAAY,GAAG,KAAK;MACtB;IACF,CAAC,MAAM;MACLa,YAAY,CAACW,UAAU,CAAC,OAAO,CAAC;MAChCX,YAAY,CAACW,UAAU,CAAC,cAAc,CAAC;MACvCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;IACjC;EACF;EAEA,OAAOV,OAAO,CAACV,MAAM,CAACJ,KAAK,CAAC;AAC9B,CACF,CAAC;AAYD,OAAO,MAAMqC,WAAW,GAAG;EACzBC,KAAK,EAAE,MAAOC,SAAoB,IAA4B;IAAA,IAAAC,mBAAA;IAC5D9B,YAAY,CAACW,UAAU,CAAC,OAAO,CAAC;IAChCX,YAAY,CAACW,UAAU,CAAC,cAAc,CAAC;IACvC,OAAO5B,GAAG,CAACgD,QAAQ,CAAC7B,OAAO,CAAC8B,MAAM,CAAC,eAAe,CAAC;IAEnD,MAAM3B,QAAQ,GAAG,MAAMtB,GAAG,CAACuC,IAAI,CAAe,aAAa,EAAEO,SAAS,EAAE;MACtE3B,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,KAAA4B,mBAAA,GAAIzB,QAAQ,CAACmB,IAAI,CAACA,IAAI,cAAAM,mBAAA,eAAlBA,mBAAA,CAAoBvC,KAAK,EAAE;MAC7BS,YAAY,CAACyB,OAAO,CAAC,OAAO,EAAEpB,QAAQ,CAACmB,IAAI,CAACA,IAAI,CAACjC,KAAK,CAAC;MAEvD,IAAIc,QAAQ,CAACmB,IAAI,CAACA,IAAI,CAACT,YAAY,EAAE;QACnCf,YAAY,CAACyB,OAAO,CAAC,cAAc,EAAEpB,QAAQ,CAACmB,IAAI,CAACA,IAAI,CAACT,YAAY,CAAC;MACvE;MAEAhC,GAAG,CAACgD,QAAQ,CAAC7B,OAAO,CAAC8B,MAAM,CAAC,eAAe,CAAC,GAAG,UAAU3B,QAAQ,CAACmB,IAAI,CAACA,IAAI,CAACjC,KAAK,EAAE;IACrF;IAEA,OAAOc,QAAQ,CAACmB,IAAI;EACtB,CAAC;EAEDS,QAAQ,EAAE,MAAOC,YAA0B,IAA4B;IAAA,IAAAC,oBAAA;IACrE,MAAM9B,QAAQ,GAAG,MAAMtB,GAAG,CAACuC,IAAI,CAAe,gBAAgB,EAAEY,YAAY,EAAE;MAC5EhC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,KAAAiC,oBAAA,GAAI9B,QAAQ,CAACmB,IAAI,CAACA,IAAI,cAAAW,oBAAA,eAAlBA,oBAAA,CAAoB5C,KAAK,EAAE;MAC7BS,YAAY,CAACyB,OAAO,CAAC,OAAO,EAAEpB,QAAQ,CAACmB,IAAI,CAACA,IAAI,CAACjC,KAAK,CAAC;MAEvD,IAAIc,QAAQ,CAACmB,IAAI,CAACA,IAAI,CAACT,YAAY,EAAE;QACnCf,YAAY,CAACyB,OAAO,CAAC,cAAc,EAAEpB,QAAQ,CAACmB,IAAI,CAACA,IAAI,CAACT,YAAY,CAAC;MACvE;MAEAhC,GAAG,CAACgD,QAAQ,CAAC7B,OAAO,CAAC8B,MAAM,CAAC,eAAe,CAAC,GAAG,UAAU3B,QAAQ,CAACmB,IAAI,CAACA,IAAI,CAACjC,KAAK,EAAE;IACrF;IAEA,OAAOc,QAAQ,CAACmB,IAAI;EACtB,CAAC;EAEDY,UAAU,EAAE,MAAAA,CAAA,KAAiE;IAC3E,MAAM/B,QAAQ,GAAG,MAAMtB,GAAG,CAACsD,GAAG,CAA6C,eAAe,CAAC;IAC3F,OAAOhC,QAAQ,CAACmB,IAAI;EACtB,CAAC;EAEDc,MAAM,EAAEA,CAAA,KAAY;IAClBtC,YAAY,CAACW,UAAU,CAAC,OAAO,CAAC;IAChCX,YAAY,CAACW,UAAU,CAAC,cAAc,CAAC;IACvC,OAAO5B,GAAG,CAACgD,QAAQ,CAAC7B,OAAO,CAAC8B,MAAM,CAAC,eAAe,CAAC;IAEnDjD,GAAG,CAACuC,IAAI,CAAC,cAAc,CAAC,CAACF,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;EAC1C,CAAC;EAEDmB,eAAe,EAAEA,CAAA,KAAe;IAC9B,MAAMhD,KAAK,GAAGS,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAO,CAAC,CAACV,KAAK;EAChB,CAAC;EAEDiD,QAAQ,EAAEA,CAAA,KAAqBxC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAE5DwC,aAAa,EAAE,MAAAA,CAAA,KAA8B;IAC3C,IAAI;MACF,MAAM1D,GAAG,CAACsD,GAAG,CAAC,gBAAgB,CAAC;MAC/B,OAAO,IAAI;IACb,CAAC,CAAC,OAAO/C,KAAK,EAAE;MACd,OAAO,KAAK;IACd;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}