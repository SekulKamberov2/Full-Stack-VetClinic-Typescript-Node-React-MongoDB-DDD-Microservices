{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { authService } from '../services/authService';\nconst initialState = {\n  user: null,\n  token: authService.getToken(),\n  isAuthenticated: authService.isAuthenticated(),\n  loading: false,\n  error: null\n};\n\n// Login\nexport const loginUser = createAsyncThunk('auth/login', async (loginData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await authService.login(loginData);\n    return response.data;\n  } catch (err) {\n    var _err$response, _err$response$data;\n    return rejectWithValue(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Login failed');\n  }\n});\n\n// Register\nexport const registerUser = createAsyncThunk('auth/register', async (registerData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await authService.register(registerData);\n    return response.data;\n  } catch (err) {\n    var _err$response2, _err$response2$data;\n    return rejectWithValue(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Registration failed');\n  }\n});\n\n// Fetch profile\nexport const fetchUserProfile = createAsyncThunk('auth/fetchProfile', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await authService.getProfile();\n    return response.data.user;\n  } catch (err) {\n    return rejectWithValue('Failed to fetch profile');\n  }\n});\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    logout: state => {\n      state.user = null;\n      state.token = null;\n      state.isAuthenticated = false;\n      state.error = null;\n      authService.logout();\n    },\n    clearError: state => {\n      state.error = null;\n    },\n    setUser: (state, action) => {\n      state.user = action.payload;\n      state.isAuthenticated = true;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(loginUser.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(loginUser.fulfilled, (state, action) => {\n      state.loading = false;\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n      state.isAuthenticated = true;\n    }).addCase(loginUser.rejected, (state, action) => {\n      state.loading = false;\n      state.error = typeof action.payload === 'string' ? action.payload : 'Login failed';\n      state.isAuthenticated = false;\n    }).addCase(registerUser.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(registerUser.fulfilled, (state, action) => {\n      state.loading = false;\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n      state.isAuthenticated = true;\n    }).addCase(registerUser.rejected, (state, action) => {\n      state.loading = false;\n      state.error = typeof action.payload === 'string' ? action.payload : 'Registration failed';\n      state.isAuthenticated = false;\n    }).addCase(fetchUserProfile.rejected, (state, action) => {\n      state.loading = false;\n      state.error = typeof action.payload === 'string' ? action.payload : 'Failed to fetch profile';\n      state.token = null;\n      state.isAuthenticated = false;\n    });\n  }\n});\nexport const {\n  logout,\n  clearError,\n  setUser\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","authService","initialState","user","token","getToken","isAuthenticated","loading","error","loginUser","loginData","rejectWithValue","response","login","data","err","_err$response","_err$response$data","message","registerUser","registerData","register","_err$response2","_err$response2$data","fetchUserProfile","_","getProfile","authSlice","name","reducers","logout","state","clearError","setUser","action","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","reducer"],"sources":["C:/Users/sekne/OneDrive/Desktop/Veterinary-Clinic/services/front-end/src/store/authSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { User, LoginData, RegisterData } from '../models/User';\r\nimport { authService } from '../services/authService';\r\n\r\ninterface AuthState {\r\n  user: User | null;\r\n  token: string | null;\r\n  isAuthenticated: boolean;\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nconst initialState: AuthState = {\r\n  user: null,\r\n  token: authService.getToken(),\r\n  isAuthenticated: authService.isAuthenticated(),\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\n// Login\r\nexport const loginUser = createAsyncThunk<{ user: User; token: string }, LoginData>(\r\n  'auth/login',\r\n  async (loginData, { rejectWithValue }) => {\r\n    try {\r\n      const response = await authService.login(loginData);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response?.data?.message || 'Login failed');\r\n    }\r\n  }\r\n);\r\n\r\n// Register\r\nexport const registerUser = createAsyncThunk<{ user: User; token: string }, RegisterData>(\r\n  'auth/register',\r\n  async (registerData, { rejectWithValue }) => {\r\n    try {\r\n      const response = await authService.register(registerData);\r\n      return response.data;\r\n    } catch (err: any) {\r\n      return rejectWithValue(err.response?.data?.message || 'Registration failed');\r\n    }\r\n  }\r\n);\r\n\r\n// Fetch profile\r\nexport const fetchUserProfile = createAsyncThunk<User>(\r\n  'auth/fetchProfile',\r\n  async (_, { rejectWithValue }) => {\r\n    try {\r\n      const response = await authService.getProfile();\r\n      return response.data.user;\r\n    } catch (err: any) {\r\n      return rejectWithValue('Failed to fetch profile');\r\n    }\r\n  }\r\n);\r\n\r\nconst authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  reducers: {\r\n    logout: (state) => {\r\n      state.user = null;\r\n      state.token = null;\r\n      state.isAuthenticated = false;\r\n      state.error = null;\r\n      authService.logout();\r\n    },\r\n    clearError: (state) => {\r\n      state.error = null;\r\n    },\r\n    setUser: (state, action: { payload: User }) => {\r\n      state.user = action.payload;\r\n      state.isAuthenticated = true;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(loginUser.pending, (state) => { state.loading = true; state.error = null; })\r\n      .addCase(loginUser.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.user = action.payload.user;\r\n        state.token = action.payload.token;\r\n        state.isAuthenticated = true;\r\n      })\r\n      .addCase(loginUser.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = typeof action.payload === 'string' ? action.payload : 'Login failed';\r\n        state.isAuthenticated = false;\r\n        })\r\n      .addCase(registerUser.pending, (state) => { state.loading = true; state.error = null; })\r\n      .addCase(registerUser.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.user = action.payload.user;\r\n        state.token = action.payload.token;\r\n        state.isAuthenticated = true;\r\n      })\r\n      .addCase(registerUser.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = typeof action.payload === 'string' ? action.payload : 'Registration failed';\r\n        state.isAuthenticated = false;\r\n        })\r\n        .addCase(fetchUserProfile.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = typeof action.payload === 'string' ? action.payload : 'Failed to fetch profile';\r\n        state.token = null;\r\n        state.isAuthenticated = false;\r\n        });\r\n  },\r\n});\r\n\r\nexport const { logout, clearError, setUser } = authSlice.actions;\r\nexport default authSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}